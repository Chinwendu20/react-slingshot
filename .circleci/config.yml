version: 2.1
orbs:
  aws-cli: circleci/aws-cli@3.1
commands:
   # Exercise - Rollback
   destroy_environment:
     parameters:
       stack:
         type: string
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           
           command: |
             aws cloudformation delete-stack --stack-name myStack-${<< parameters.stack >>}
           when: on_fail
jobs:
  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
  # Exercise: Config and Deployment
  configure_infrastructure: 
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["c5:6a:61:e4:a3:9c:d0:db:ad:39:c6:35:b3:65:6b:eb"] 
      - run:
          name: Install Ansible
          command: |
              apk add --update --no-cache openssh
              apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            # Your command
            cd 2_Ansible/
            ansible-playbook -i inventory main-remote.yaml
    # Exercise: Smoke Testing
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test
  #         command: |
  #           URL="https://blog.udacityppp.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      - destroy_environment:
          stack: ${CIRCLE_WORKFLOW_ID:0:7} 


# Sequential workflow
workflows:
  aws-cli:
    jobs:
      - smoke_test:
          requires:
            - configure_infrastructure
      - configure_infrastructure
    
